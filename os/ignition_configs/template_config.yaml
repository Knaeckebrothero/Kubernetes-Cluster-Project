# Use butane to generate the ignition file
# Windows command: butane --pretty --strict config.bu --output config.ign
# Configuration for Kubernetes node with LUKS encryption
#
# Network Configuration:
# - Nodes use DHCP from MikroTik router (10.0.50.1)
# - MikroTik should have DHCP reservations (MAC â†’ stable IP) configured
# - DHCP enables automatic Tang unlock at boot (no kernel arguments needed!)
#
# Required Values to Replace:
# - <TANG_SERVER_IP>: IP of Tang server (e.g., 10.0.50.10)
# - <TANG_THUMBPRINT>: Tang server's signing key thumbprint
# - <SSH_KEY>: Your SSH public key
# - <NODE_HOSTNAME>: Hostname for this node (e.g., k3s-node-1, k3s-node-2)
# - <K3S_MASTER_IP>: K3s master node IP (for joining nodes)
# - <K3S_TOKEN>: Token from first node (get with: sudo cat /var/lib/rancher/k3s/server/node-token)
# - <THIS_NODE_IP>: This specific node's IP (for K3s external IP)
# - <K3S_NODE_IPS>: Comma-separated list of all K3s node IPs (for TLS SAN)
variant: fcos
version: 1.6.0

# Boot device LUKS encryption with Tang server unlock
# NOTE: Tang unlock works automatically with DHCP (rd.neednet=1 is auto-added by FCOS)
# IMPORTANT: Back up Tang server keys (/var/db/tang/ on Tang server) and store securely!
#            If Tang server fails and keys are lost, encrypted nodes cannot be recovered.
boot_device:
  luks:
    tang:
      - url: "http://<TANG_SERVER_IP>"  # Example: http://10.0.50.10
        thumbprint: "<TANG_THUMBPRINT>"  # Get from: tang-show-keys on Tang server
    discard: true  # Enable TRIM support for SSD performance

# User configuration
passwd:
  users:
    # CoreOS user with sudo privileges and SSH key for remote access
    - name: core
      ssh_authorized_keys:
        - <SSH_KEY>  # Your full SSH public key (ssh-ed25519 AAAA...)

# System services configuration
systemd:
  units:
    # Disable cloud-init services
    - name: nm-cloud-setup.service
      mask: true
    - name: nm-cloud-setup.timer
      mask: true

    # Setup weekly reboot timer (reboots every week, gmt timezone)
    - name: weekly-restart.timer
      enabled: true
      contents: |
        [Unit]
        Description=Weekly Restart

        [Timer]
        OnCalendar=Tue *-*-* 03:00:00
        Persistent=true

        [Install]
        WantedBy=multi-user.target

    # Setup a service that get's triggered by the timer to reboot the system
    - name: Weekly-restart.service
      enabled: true
      contents: |
        [Unit]
        Description=Trigger Weekly Restart

        [Service]
        Type=oneshot
        ExecStart=/usr/bin/systemctl reboot

        [Install]
        WantedBy=timer.target

    # Install and configure kubernetes
    - name: k3s-install.service
      enabled: true
      contents: |
        [Unit]
        Description=Install k3s
        After=network-online.target
        Wants=network-online.target
        ConditionPathExists=!/usr/local/bin/k3s

        [Service]
        Type=oneshot
        # FIRST NODE ONLY - Uncomment these lines to initialize a new HA cluster:
        # Environment="INSTALL_K3S_EXEC=server --cluster-init --tls-san <K3S_NODE_IPS> --node-external-ip=<THIS_NODE_IP>"
        # ExecStart=/bin/sh -c 'curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="$INSTALL_K3S_EXEC" sh -s - --write-kubeconfig-mode 644'
        # After first node starts, get token with: sudo cat /var/lib/rancher/k3s/server/node-token
        #
        # JOINING NODES - Use these lines for additional server/worker nodes:
        Environment="INSTALL_K3S_EXEC=server --server https://<K3S_MASTER_IP>:6443 --tls-san <K3S_NODE_IPS> --node-external-ip=<THIS_NODE_IP>"
        Environment="K3S_TOKEN=<K3S_TOKEN>"
        ExecStart=/bin/sh -c 'curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="$INSTALL_K3S_EXEC" K3S_TOKEN="$K3S_TOKEN" sh -s - --write-kubeconfig-mode 644'
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    # Setup zincati update service
    - name: zincati.service
      enabled: true
      contents: |
        [Unit]
        Description=Zincati Update Service
        After=network-online.target
        Wants=network-online.target

        [Service]
        Type=simple
        ExecStart=/usr/libexec/zincati agent -v
        Restart=on-failure
        RestartSec=5s

        [Install]
        WantedBy=multi-user.target

# Storage configuration
# - 2TB M.2 SSD: Encrypted via LUKS (boot_device.luks above), contains OS + Longhorn storage
# - 4TB SATA SSD: Unencrypted, dedicated to MinIO object storage
storage:
  disks:
    # Main OS disk (2TB M.2 SSD) - will be encrypted by boot_device.luks
    - device: /dev/disk/by-id/coreos-boot-disk
      wipe_table: false
      partitions:
      - number: 4  # Root partition (will be encrypted)
        label: root
        size_mib: 16384  # 16GB for root filesystem
        resize: true
      - size_mib: 0  # Remaining space for /var (includes Longhorn storage)
        label: var

    # MinIO storage disk (4TB SATA SSD) - unencrypted for performance
    # Using standard device name since all nodes have identical hardware setup
    - device: /dev/sda
      wipe_table: true
      partitions:
      - number: 1
        label: minio-storage
        size_mib: 0  # Use entire disk
        start_mib: 0

  # Configure file systems
  filesystems:
    # Mount /var partition (on encrypted disk)
    - path: /var
      device: /dev/disk/by-partlabel/var
      format: xfs
      wipe_filesystem: true
      with_mount_unit: true

    # Mount MinIO storage (unencrypted disk)
    - path: /var/lib/minio
      device: /dev/disk/by-partlabel/minio-storage
      format: xfs
      wipe_filesystem: true
      with_mount_unit: true

  # Create directories
  directories:
    - path: /var/lib/longhorn  # Longhorn data will be stored on encrypted /var
      mode: 0755
    - path: /var/lib/minio  # MinIO mount point
      mode: 0755

  # Create files
  files:
    # Set the hostname
    - path: /etc/hostname
      mode: 0644
      contents:
        inline: <NODE_HOSTNAME>  # Example: k3s-node-1, k3s-node-2, etc.

    # Configure longer shutdown timeout for graceful K3s pod termination
    - path: /etc/systemd/system.conf.d/90-custom.conf
      mode: 0644
      contents:
        inline: |
          [Manager]
          DefaultTimeoutStopSec=600s
          DefaultTimeoutStartSec=300s

    # Config file for zincati
    - path: /etc/zincati/config.d/90-custom.toml
      overwrite: true
      mode: 0644
      contents:
        inline: |
          [updates]
          strategy = "periodic"
          periodic.interval_minutes = 10080 # Checks for updates every 7 days

          [updates.allow_downgrade]
          enabled = false  # Avoid downgrades

          [reboot]
          strategy = "off" # Disable reboot, since server reboots on daily basis anyway
